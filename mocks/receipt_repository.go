// Code generated by MockGen. DO NOT EDIT.
// Source: .\ports\repository\receipt_repository.go
//
// Generated by this command:
//
//	mockgen.exe -source .\ports\repository\receipt_repository.go -destination .\mocks\receipt_repository.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/kiramishima/receipt-processor/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockIReceiptRepository is a mock of IReceiptRepository interface.
type MockIReceiptRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIReceiptRepositoryMockRecorder
}

// MockIReceiptRepositoryMockRecorder is the mock recorder for MockIReceiptRepository.
type MockIReceiptRepositoryMockRecorder struct {
	mock *MockIReceiptRepository
}

// NewMockIReceiptRepository creates a new mock instance.
func NewMockIReceiptRepository(ctrl *gomock.Controller) *MockIReceiptRepository {
	mock := &MockIReceiptRepository{ctrl: ctrl}
	mock.recorder = &MockIReceiptRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReceiptRepository) EXPECT() *MockIReceiptRepositoryMockRecorder {
	return m.recorder
}

// FindReceiptById mocks base method.
func (m *MockIReceiptRepository) FindReceiptById(id string) (*domain.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReceiptById", id)
	ret0, _ := ret[0].(*domain.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReceiptById indicates an expected call of FindReceiptById.
func (mr *MockIReceiptRepositoryMockRecorder) FindReceiptById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReceiptById", reflect.TypeOf((*MockIReceiptRepository)(nil).FindReceiptById), id)
}

// SaveReceiptPoints mocks base method.
func (m *MockIReceiptRepository) SaveReceiptPoints(points int16) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveReceiptPoints", points)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveReceiptPoints indicates an expected call of SaveReceiptPoints.
func (mr *MockIReceiptRepositoryMockRecorder) SaveReceiptPoints(points any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveReceiptPoints", reflect.TypeOf((*MockIReceiptRepository)(nil).SaveReceiptPoints), points)
}
