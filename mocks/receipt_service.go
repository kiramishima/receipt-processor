// Code generated by MockGen. DO NOT EDIT.
// Source: .\ports\services\receipt_service.go
//
// Generated by this command:
//
//	mockgen.exe -source .\ports\services\receipt_service.go -destination .\mocks\receipt_service.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/kiramishima/receipt-processor/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockIReceiptService is a mock of IReceiptService interface.
type MockIReceiptService struct {
	ctrl     *gomock.Controller
	recorder *MockIReceiptServiceMockRecorder
}

// MockIReceiptServiceMockRecorder is the mock recorder for MockIReceiptService.
type MockIReceiptServiceMockRecorder struct {
	mock *MockIReceiptService
}

// NewMockIReceiptService creates a new mock instance.
func NewMockIReceiptService(ctrl *gomock.Controller) *MockIReceiptService {
	mock := &MockIReceiptService{ctrl: ctrl}
	mock.recorder = &MockIReceiptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReceiptService) EXPECT() *MockIReceiptServiceMockRecorder {
	return m.recorder
}

// RetrieveReceipt mocks base method.
func (m *MockIReceiptService) RetrieveReceipt(id string) (*domain.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveReceipt", id)
	ret0, _ := ret[0].(*domain.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveReceipt indicates an expected call of RetrieveReceipt.
func (mr *MockIReceiptServiceMockRecorder) RetrieveReceipt(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveReceipt", reflect.TypeOf((*MockIReceiptService)(nil).RetrieveReceipt), id)
}

// StoreReceipt mocks base method.
func (m *MockIReceiptService) StoreReceipt(ctx context.Context, base *domain.ReceiptBase) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreReceipt", ctx, base)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreReceipt indicates an expected call of StoreReceipt.
func (mr *MockIReceiptServiceMockRecorder) StoreReceipt(ctx, base any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreReceipt", reflect.TypeOf((*MockIReceiptService)(nil).StoreReceipt), ctx, base)
}
